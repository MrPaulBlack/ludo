#include "Main.hpp"



//define all objects globally so thay can be accessed by all functions in Main.cpp
Game game(4, 0);                                                    //game objekt for round tracker and stuff like that
std::vector<Player> player(game.getPlayer() + game.getCPU(), 4);    //array with player objects
Board board(game.getPlayer() + game.getCPU(), 10);                  //board object (constructor with num of player and size of board)



//main game loop until someone wins
int main() {
    do {
        gameRound();
    }  while (game.getWon() == -1);
    return 0;
}



void gameRound() {
    for (size_t i = 0; i < player.size(); i++) {
        if (game.getWon() == -1) {
            gamePrint(i);
            if (i < game.getPlayer()) {
                gameRule(i, game.getInput(gameRule(i, -1)));
            }
            else {
                game.setRandom(gameRule(i, -1));
                std::cout << "CPU selects " << game.getRandom() << "." << std::endl;
                gameRule(i, game.getRandom());
            }
            std::cout << std::endl << std::endl << std::endl << std::endl << std::endl;
            gameWon(i);
        }
    }
    game.setRound();
}



int gameRule( size_t i, int selectedRule) {
    int numMoves = 0;                   // number of moves generated by ruleSet
    if (player[i].getStartFull() || player[i].getStart() + player[i].getFigureEnd() >= player[i].getFigure()) {          //all pieces of player in start or start and end
        if (game.getDice() == -1) {                                                                 //player did not get a six after 3 tries
            numMoves += 1;
            if (selectedRule == numMoves) { return 0; }        //do nothing
            else if (selectedRule == -1) {
                std::cout << numMoves << ": Sorry you did not get a six after 3 tries." << std::endl;
            }
        }
        else if (board.getStartPosition(i, game.getDice()) == -1) {                                 //player got a six after 3 tries and field is empty
            numMoves += 1;
            if (selectedRule == numMoves)
            {
                board.setStartPosition(i, game.getDice());
                player[i].setStart(-1);
                return 0;
            }
            else if (selectedRule == -1) {
                std::cout << numMoves << ": You can move one of your figures out of start " << game.getDice() << " fields." << std::endl;
            }
        }
        else if (board.getStartPosition(i, game.getDice()) != -2) {                                 //player got a six and field is full
            numMoves += 1;
            if (selectedRule == numMoves)
            {
                player[board.setStartPosition(i, game.getDice())].setStart(1);
                player[i].setStart(-1);
                return 0;
            }
            else if (selectedRule == -1) {
                std::cout << numMoves << ": You can move one of your figures out of start " << game.getDice() << " fields and kick out another figure." << std::endl;
            }
        }
    }
    else {
        if (player[i].getStart() > 0 && game.getDice() > 6) {  //dice graeter then six, player has another piece in start and position is not blocked by a figure of that player
            if (board.getStartPosition(i, game.getDice()  -6) != -1 && board.getStartPosition(i, game.getDice() -6) != static_cast<int>(i) && board.getStartPosition(i, game.getDice()  -6) != -2) {                                       //player got a six and filed is full
                numMoves += 1;
                if (selectedRule == numMoves)
                {
                    player[board.setStartPosition(i, game.getDice() -6)].setStart(1);
                    player[i].setStart(-1);
                    return 0;
                }
                else if (selectedRule == -1) {
                    std::cout << numMoves << ": You can move another figure out of start " << game.getDice() -6 << " fields and kick out another figure." << std::endl;
                }
            }
            else if (board.getStartPosition(i, game.getDice() -6) == -1) {                                  //player got a six after 3 tries and field is empty
                numMoves += 1;
                if (selectedRule == numMoves)
                {
                    board.setStartPosition(i, game.getDice() -6);
                    player[i].setStart(-1);
                    return 0;
                }
                else if (selectedRule == -1) {
                    std::cout << numMoves << ": You can move another figure out of start " << game.getDice() -6 << " fields." << std::endl;
                }
            }
        }
        for (int n = 0; n < player[i].getFigureEnd(); n++) {       //loops through every position in player end
            if (player[i].getEnd(n) && n + game.getDice() < player[i].getFigure() && !player[i].getEnd(n + game.getDice())) { //if piece can be moved inside end of player
                numMoves += 1;
                    if (selectedRule == numMoves) {
                        player[i].setEnd(n, false);
                        player[i].setEnd(n + game.getDice(), true);
                        return 0;
                    }
                    else if (selectedRule == -1) {
                        std::cout << numMoves << ": You can move your figure from field " << n + 1 << " to field " << n + game.getDice() +1 << " inside your player end." << std::endl;
                        std::cout << std::endl;
                    }
            }
        }
        for (int n = player[i].getFigure(); n > player[i].getStart() + player[i].getFigureEnd(); n--) {  //goes through the number of pieces the player has on the board
            if (board.getNewPosition(i, board.getPosition(i, player[i].getFigure() +1 -n), game.getDice()) != -1) {             //if player can move to a field that is not out of bounds
                if (board.getPlayer(board.getNewPosition(i, board.getPosition(i, player[i].getFigure() +1 -n), game.getDice())) == -1) {        //if the new filed is empty
                    numMoves += 1;
                    if (selectedRule == numMoves) {
                        board.setPosition(board.getPosition(i, player[i].getFigure() +1 -n), board.getNewPosition(i, board.getPosition(i, player[i].getFigure() +1 -n), game.getDice()), i);
                        return 0;
                    }
                    else if (selectedRule == -1) {
                        std::cout << numMoves << ": You can move figure " << player[i].getFigure() +1 -n << " from field " << board.getPosition(i, player[i].getFigure() +1 -n) +1 << " to field " << board.getNewPosition(i, board.getPosition(i, player[i].getFigure() +1 -n), game.getDice()) +1 << "." << std::endl;
                    }
                }
                if (board.getPlayer(board.getNewPosition(i, board.getPosition(i, player[i].getFigure() +1 -n), game.getDice())) != -1 && board.getPlayer(board.getNewPosition(i, board.getPosition(i, player[i].getFigure() +1 -n), game.getDice())) != static_cast<int>(i)) {        //if there is alraedy a figure on the new field
                    numMoves += 1;
                    if (selectedRule == numMoves) {
                        player[board.getPlayer(board.getNewPosition(i, board.getPosition(i, player[i].getFigure() +1 -n), game.getDice()))].setStart(1);
                        board.setPosition(board.getPosition(i, player[i].getFigure() +1 -n), board.getNewPosition(i, board.getPosition(i, player[i].getFigure() +1 -n), game.getDice()), i);
                        return 0;
                    }
                    else if (selectedRule == -1) {
                        std::cout << numMoves << ": You can move figure " << player[i].getFigure() +1 -n << " from field " << board.getPosition(i, player[i].getFigure() +1 -n) +1 << " to field " << board.getNewPosition(i, board.getPosition(i, player[i].getFigure() +1 -n), game.getDice()) +1 << " and kick out another figure." << std::endl;
                    }
                }
            }
            else if (board.getNewPosition(i, board.getPosition(i, player[i].getFigure() +1 -n), game.getDice()) == -1) {            //checks if player can put figure into end
                if (board.getOutOfBound(i, board.getPosition(i, player[i].getFigure() +1 -n), game.getDice()) <= player[i].getFigure() && !player[i].getEnd(board.getOutOfBound(i, board.getPosition(i, player[i].getFigure() +1 -n), game.getDice()) -1)) {
                    numMoves += 1;
                    if (selectedRule == numMoves) {
                        player[i].setEnd(board.getOutOfBound(i, board.getPosition(i, player[i].getFigure() +1 -n), game.getDice()) -1, true);
                        board.deletePosition(board.getPosition(i, player[i].getFigure() +1 -n));
                        return 0;
                    }
                    else if (selectedRule == -1) {
                        std::cout << numMoves << ": You can move figure " << player[i].getFigure() +1 -n << " into the player end." << std::endl;
                    }
                }
            }
        }
    }
    if (numMoves == 0) {        //nothing matched give option to do nothing
        numMoves += 1;
        if (selectedRule == numMoves) { return 0; }
        else if (selectedRule == -1) {
            std::cout << numMoves << ": You cannot move any figure." << std::endl;
        }
    }
    return numMoves;
}



void gamePrint(size_t i) {
    //print game round header
    if (i < game.getPlayer()) {
        std::cout << "Round " <<  game.getRound() << ", Player " << i + 1 << " turn:" << std::endl;
    }
    else {
         std::cout << "Round " <<  game.getRound() << ", CPU " << i + 1 - game.getPlayer() << " turn:" << std::endl;
    }
    //generate and print current dice
    if (player[i].getStartFull() || player[i].getStart() + player[i].getFigureEnd() >= player[i].getFigure()) {
        game.setDice(true);
        if (game.getDice() == -1) {
            std::cout << "You rolled 3 times and did not get a six with your dice." << std::endl;
        }
        else {
            std::cout << "You rolled 3 times and got a six and a " << game.getDice() << " with your dice." << std::endl;
        }
    }
    else {
        game.setDice(false);
        for (int n = 1; n <= game.getDice() /6; n++) {
            std::cout << "You rolled a 6 with your dice." << std::endl;
        }
        std::cout << "You rolled a " << game.getDice() - ((game.getDice() /6) *6) << " with your dice." << std::endl;
    }
    std::cout << std::endl;
    //print current Board
    board.printBoard();
    //print current player ends
    std::cout << "P" << i +1 << " End:   ";
    player[i].printEnd();
    std::cout << std::endl << std::endl << std::endl;
    //print turn info and misc endl
    std::cout << "You have the following options for your turn:" << std::endl;
    std::cout << std::endl;
}



void gameWon(size_t i) {
    if (player[i].getFullEnd()) {
        game.setWon(i);
        if (i < game.getPlayer()) {
            std::cout << "Player " << game.getWon() + 1 << " won the Game after " << game.getRound() << " Rounds!" << std::endl;
        }
        else {
            std::cout << "CPU " << game.getWon() + 1 - game.getPlayer() << " won the Game after " << game.getRound() << " Rounds!" << std::endl;
        }
    }
}
